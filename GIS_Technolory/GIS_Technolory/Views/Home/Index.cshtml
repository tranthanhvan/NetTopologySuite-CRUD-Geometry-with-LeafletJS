@{
    ViewData["Title"] = "Home Page";
}

<script src="~/js/leaflet/leaflet-src.js"></script>
<link href="~/css/leaflet.css" rel="stylesheet" />

<script src="~/js/drawing/Leaflet.draw.js"></script>
<script src="~/js/drawing/Leaflet.Draw.Event.js"></script>
<link href="~/js/drawing/leaflet.draw.css" rel="stylesheet" />

<script src="~/js/drawing/Toolbar.js"></script>
<script src="~/js/drawing/Tooltip.js"></script>

<script src="~/js/drawing/ext/GeometryUtil.js"></script>
<script src="~/js/drawing/ext/LatLngUtil.js"></script>
<script src="~/js/drawing/ext/LineUtil.Intersect.js"></script>
<script src="~/js/drawing/ext/Polygon.Intersect.js"></script>
<script src="~/js/drawing/ext/Polyline.Intersect.js"></script>
<script src="~/js/drawing/ext/TouchEvents.js"></script>

<script src="~/js/drawing/draw/DrawToolbar.js"></script>
<script src="~/js/drawing/draw/handler/Draw.Feature.js"></script>
<script src="~/js/drawing/draw/handler/Draw.SimpleShape.js"></script>
<script src="~/js/drawing/draw/handler/Draw.Polyline.js"></script>
<script src="~/js/drawing/draw/handler/Draw.Marker.js"></script>
<script src="~/js/drawing/draw/handler/Draw.Circle.js"></script>
<script src="~/js/drawing/draw/handler/Draw.CircleMarker.js"></script>
<script src="~/js/drawing/draw/handler/Draw.Polygon.js"></script>
<script src="~/js/drawing/draw/handler/Draw.Rectangle.js"></script>


<script src="~/js/drawing/edit/EditToolbar.js"></script>
<script src="~/js/drawing/edit/handler/EditToolbar.Edit.js"></script>
<script src="~/js/drawing/edit/handler/EditToolbar.Delete.js"></script>

<script src="~/js/drawing/Control.Draw.js"></script>

<script src="~/js/drawing/edit/handler/Edit.Poly.js"></script>
<script src="~/js/drawing/edit/handler/Edit.SimpleShape.js"></script>
<script src="~/js/drawing/edit/handler/Edit.Rectangle.js"></script>
<script src="~/js/drawing/edit/handler/Edit.Marker.js"></script>
<script src="~/js/drawing/edit/handler/Edit.CircleMarker.js"></script>
<script src="~/js/drawing/edit/handler/Edit.Circle.js"></script>

<script src="~/js/geocoder/control.geocoder.js"></script>
<link href="~/js/geocoder/control.geocoder.css" rel="stylesheet" />

<link href="~/js/hightlight/leaflet.marker.highlight.css" rel="stylesheet" />
<script src="~/js/hightlight/leaflet.marker.highlight.js"></script>

<div class="text-center" style="height: 590px; position:relative">
    <div id="GISMap" style="height: 590px;" class="leaflet-container leaflet-touch leaflet-fade-anim leaflet-grab leaflet-touch-drag leaflet-touch-zoom">

    </div>
    <div style="position:absolute; right:0px; top:0px; height:100%;max-height: inherit;">
        <div id="panel">
            <div style="margin-top : 60px;">
                <div class="row">
                    <hr />
                    <center><b><span style="color : white">SEARCH TOOL</span></b></center>
                    <div class="col-12" style="margin-top : 15px;">
                        <div class="custom-search">
                            <input type="text" class="custom-search-input" placeholder="Enter Name">
                            <button class="custom-search-botton">Search</button>
                        </div>
                    </div>
                </div>

                <hr />
                <div class="row">
                    <div class="col-md-12">
                        <div class="col-md-1">
                        </div>
                        <div class="col-md-10" id="resultSearch">
                        </div>
                        <div class="col-md-1">
                        </div>
                    </div>
                </div>
            </div>

        </div>

        <div id='click' class="to-left">
            <img src="/Icon/icons8-search-30.png" style="margin-left : 5px" />
        </div>
    </div>
    <div class="loading-bar"></div>
</div>

<div class="modal fade" id="modal-marker" tabindex="-1" style="margin-top: 5%" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Marker detail</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="container-modal-body-marker">
                
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary" form="form-marker-input">Save changes</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-polyline" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Marker detail</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="container-modal-body-polyline" style="height: 500px;overflow-y: auto;">

            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary" form="form-polyline-input">Save changes</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    var osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',

        osmAttrib = 'Bạn đang sử dụng <a href="http://openstreetmap.org/copyright">&copy; OpenStreet Map</a>',
        googleAttrib = 'Bạn đang sử dụng <a href="https://www.google.com/maps/">&copy; Google Map</a>',

        osm = L.tileLayer(osmUrl, {
            maxZoom: 19,
            minZoom: 2,
            attribution: osmAttrib
        });

    mapWord = L.tileLayer('https://api.maptiler.com/maps/streets/256/{z}/{x}/{y}.png?key=tE8RgRCdEojZFnaUYLB7', {
        attribution: '<a href="https://www.maptiler.com/copyright/" target="_blank">&copy; MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>',
        minZoom: 5
    });

    googleStreets = L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
        maxZoom: 19,
        minZoom: 2,
        subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
        attribution: googleAttrib
    });

    //gmapGlobal = L.tileLayer('http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}', { maxZoom: 20, attribution: googleAttrib }),
    // 'HTml element'
    map = new L.Map('GISMap', { center: new L.LatLng(21.028511, 105.804817), zoom: 14 });

    L.control.scale().addTo(map);

    var collectionLatLngsLocal = [];

    //Draw & edit tool
    var drawnItems = L.featureGroup().addTo(map);

    var geocoder = L.Control.geocoder({
        defaultMarkGeocode: false
    }).on('markgeocode', function (e) {
        var bbox = e.geocode.bbox;
        console.log(bbox);
        var poly = L.polygon([
            bbox.getSouthEast(),
            bbox.getNorthEast(),
            bbox.getNorthWest(),
            bbox.getSouthWest(),
        ]).addTo(map);

        //var middleLatlngs = poly.getBounds().getCenter();
        //map.flyTo(new L.LatLng(middleLatlngs.lat, middleLatlngs.lng));
        map.fitBounds(poly.getBounds());

        setTimeout(function () {
            map.removeLayer(poly);
        }, 5000);
    }).addTo(map);

    // #region Marker

    function EditFromMap(idMarker) {
        GetMarker(idMarker,0,0);
    }

    function Delete(id) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    type: "GET",
                    url: "/Marker/DeleteMarker",
                    beforeSend: function () {
                        $(".loading-bar").show();
                    },
                    complete: function () {
                        $(".loading-bar").hide();
                    },
                    data: {
                        id: id
                    },
                    success: function (response) {
                        var $response = response;
                        if ($response.Success) {
                            map.eachLayer(function (layer) {
                                if (typeof (layer._latlng) == "undefined") {

                                }
                                else {
                                    if (layer._latlng.lat == $response.Data.Latitude && layer._latlng.lng == $response.Data.Longitude) {

                                        window[$response.Data.Type.MapName].removeLayer(layer);
                                        drawnItems.removeLayer(layer);

                                        Toast.fire({
                                            icon: 'success',
                                            title: $response.Message
                                        })
                                        return;
                                    }
                                }
                            });
                        }
                        else {
                            Toast.fire({
                                icon: 'error',
                                title: $response.Message
                            })
                        }
                    }
                });
            }
        })
    }

    function GetMarker(id, lat, long) {
        let raw = {
            ID: id,
            Lat: 0,
            Long: 0
        };

        if (raw.ID == null || raw.ID == '') {
            raw.Lat = lat;
            raw.Long = long;
        }

        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            beforeSend: function () {
                $(".loading-bar").show();
            },
            complete: function () {
                $(".loading-bar").hide();
            },
            url: "/Marker/GetMarker",
            data: JSON.stringify(raw),
            success: function (response) {
                var $response = response;
                if ($response.Success == true) {

                    $("#container-modal-body-marker").html("");
                    $("#container-modal-body-marker").html($response.Data);

                    $("#form-marker-input-typemarker").msDropdown({ roundedBorder: false });

                    SetValidFormMaker();

                    let modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('modal-marker')) // Returns a Bootstrap modal instance
                    // Show or hide:
                    modal.show();
                }
                else {
                    alert('error when get geotdata');
                }
            }
        });
    }

    function SetValidFormMaker() {
        $('#form-marker-input').validate({
            ignore: "",
            rules: {
                "form-marker-input-typemarker": {
                    required: true,
                },
                "form-marker-input-name": {
                    required: true,
                }
            },
            messages: {
                "form-marker-input-typemarker": {
                    required: "Type marker is invalid",
                },
                "form-marker-input-name": {
                    required: "Name marker is invalid",
                }
            },
            invalidHandler: function (event, validator) {

            },
            submitHandler: function (form) {

                let model = {
                    ID: $('#form-marker-input-id').val(),
                    Name: $('#form-marker-input-name').val(),
                    Lat: $('#form-marker-input-lat').val(),
                    Long: $('#form-marker-input-long').val(),
                    TypeID: $('#form-marker-input-typemarker').val()
                }

                let url = '/Marker/UpdateInfor';
                if (model.ID == null || model.ID == '') {
                    url = '/Marker/Create';
                }

                $.ajax({
                    type: "POST",
                    url: url,
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function () {
                        $(".loading-bar").show();
                    },
                    complete: function () {
                        $(".loading-bar").hide();
                    },
                    data: JSON.stringify(model),
                    success: function (response) {
                        var $response = response;
                        if ($response.Success) {
                            if (url == '/Marker/Create') {
                                let MarkerInfo = L.Icon.extend({
                                    options: {
                                        //shadowUrl: '/images/marker-shadow.png',
                                        iconAnchor: new L.Point(L.Draw.constants.anchorSize, L.Draw.constants.anchorSize),
                                        iconSize: new L.Point(L.Draw.constants.iconSize, L.Draw.constants.iconSize),
                                        iconUrl: $response.Data.Type.Icon,
                                        id: $response.Data.ID
                                    }
                                });

                                let CreateMarker = L.marker([$response.Data.Latitude, $response.Data.Longitude],
                                    {
                                        icon: new MarkerInfo()
                                    }).bindPopup($response.Data.PopupContent);

                                window[$response.Data.Type.MapName].addLayer(CreateMarker);
                                drawnItems.addLayer(CreateMarker);

                                let modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('modal-marker'))
                                modal.hide();

                                Toast.fire({
                                    icon: 'success',
                                    title: $response.Message
                                })
                            }
                            else //Update case
                            {
                                map.eachLayer(function (layer) {

                                    if (typeof (layer._latlng) == "undefined") {

                                    }
                                    else {
                                        if (layer._latlng.lat == $response.Data.Marker.Latitude && layer._latlng.lng == $response.Data.Marker.Longitude) {

                                            window[$response.Data.OldMap].removeLayer(layer);
                                            drawnItems.removeLayer(layer);

                                            let MarkerInfo = L.Icon.extend({
                                                options: {
                                                    iconAnchor: new L.Point(L.Draw.constants.anchorSize, L.Draw.constants.anchorSize),
                                                    iconSize: new L.Point(L.Draw.constants.iconSize, L.Draw.constants.iconSize),
                                                    iconUrl: $response.Data.Marker.Type.Icon,
                                                    id: $response.Data.Marker.ID
                                                }
                                            });

                                            let MarkerReplace = L.marker([$response.Data.Marker.Latitude, $response.Data.Marker.Longitude],
                                                {
                                                    icon: new MarkerInfo()
                                                }).bindPopup($response.Data.Marker.PopupContent);


                                            window[$response.Data.Marker.Type.MapName].addLayer(MarkerReplace);
                                            drawnItems.addLayer(MarkerReplace);

                                            return;
                                        }
                                    }
                                });

                                Toast.fire({
                                    icon: 'success',
                                    title: $response.Message
                                })

                                let modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('modal-marker'))
                                modal.hide();
                            }
                        }
                        else {
                            Swal.fire({
                                title: 'Notification',
                                text: $response.Message,
                                icon: 'error',
                                confirmButtonText: 'Close'
                            });
                        }
                    },
                    error: function (data) {
                        Swal.fire({
                            title: 'Notification',
                            text: 'Error when call api controller',
                            icon: 'error',
                            confirmButtonText: 'Close'
                        });
                    }
                });
            }
        });
    }

    function UpdateLocationMarker(raw) {
        $.ajax({
            type: "POST",
            url: "Marker/UpdateLocation",
            contentType: "application/json; charset=utf-8",
            beforeSend: function () {
                $(".loading-bar").show();
            },
            complete: function () {
                $(".loading-bar").hide();
            },
            data: JSON.stringify(raw),
            success: function (response) {
                var $response = response;
                if ($response.Success) {
                    debugger;

                    Toast.fire({
                        icon: 'success',
                        title: $response.Message
                    });
                }
                else {
                    Swal.fire({
                        title: 'Notification',
                        text: $response.Message,
                        icon: 'error',
                        confirmButtonText: 'Close'
                    });
                }
            },
            error: function (data) {
                Swal.fire({
                    title: 'Notification',
                    text: 'Error when call api controller',
                    icon: 'error',
                    confirmButtonText: 'Close'
                });
            }
        });
    }

    // #endregion Marker

    // #region Polyline
    function EditPolyline(idPolyline) {
        GetPolyline(idPolyline, null, null, null);
    }


    function GetPolyline(id, arrLatLngs, length , central) {

        let raw = {
            ID: id,
            CablineLength: '',
            CentralLatlng: '',
            LatLongs: []
        };

        if (raw.ID == null || raw.ID == '') {
            raw.CablineLength = length;
            raw.CentralLatlng = central;
            raw.LatLongs = arrLatLngs;
        }

        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            beforeSend: function () {
                $(".loading-bar").show();
            },
            complete: function () {
                $(".loading-bar").hide();
            },
            url: "/Polyline/GetPolyline",
            data: JSON.stringify(raw),
            success: function (response) {
                var $response = response;
                if ($response.Success == true) {

                    $("#container-modal-body-polyline").html("");
                    $("#container-modal-body-polyline").html($response.Data);

                    $("#form-polyline-input-type").msDropdown({ roundedBorder: false });

                    collectionLatLngsLocal = arrLatLngs;

                    SetValidFormPolyline();

                    let modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('modal-polyline'))
                    modal.show();
                }
                else {
                    alert('error when get geotdata');
                }
            }
        });
    }

    function SetValidFormPolyline() {
        $('#form-polyline-input').validate({
            ignore: "",
            rules: {
                "form-polyline-input-type": {
                    required: true,
                },
                "form-polyline-input-name": {
                    required: true,
                }
            },
            messages: {
                "form-polyline-input-type": {
                    required: "Type Polyline is invalid",
                },
                "form-polyline-input-name": {
                    required: "Name marker is invalid",
                }
            },
            invalidHandler: function (event, validator) {

            },
            submitHandler: function (form) {
                let model = {
                    ID: $('#form-polyline-input-id').val(),
                    Name: $('#form-polyline-input-name').val(),
                    CablineLength: $('#form-polyline-input-length').val(),
                    CentralLatlng: $('#form-polyline-input-central').val(),
                    TypeID: $('#form-polyline-input-type').val(),
                    LatLongs : collectionLatLngsLocal
                }

                let url = '/Polyline/UpdateInfor';
                if (model.ID == null || model.ID == '') {
                    url = '/Polyline/Create';
                }

                $.ajax({
                    type: "POST",
                    url: url,
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function () {
                        $(".loading-bar").show();
                    },
                    complete: function () {
                        $(".loading-bar").hide();
                    },
                    data: JSON.stringify(model),
                    success: function (response) {
                        var $response = response;
                        if ($response.Success) {
                            if (url == '/Polyline/Create') 
                            {
                                let inforPolyline = {
                                    color: $response.Data.ColorLine,
                                    weight: $response.Data.WeightLine
                                };

                                var polyline = L.polyline([$response.Data.OnlyLatLongs], inforPolyline);

                                polyline.bindPopup($response.Data.PopupContent);

                                window[$response.Data.MapName].addLayer(polyline);
                                drawnItems.addLayer(polyline);

                                let modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('modal-polyline'))
                                modal.hide();

                                Toast.fire({
                                   icon: 'success',
                                   title: $response.Message
                                });
                                collectionLatLngsLocal = [];
                            }
                            else //Update case
                            {
                                //Remove Old
                                let ArrLngs = $response.Latlngs;

                                let LayerLngs = [];

                                ArrLngs.forEach(function (item) {
                                    let itemInject = {
                                        lat: item.lat,
                                        lng: item.lng
                                    };
                                    LayerLngs.push(itemInject);
                                });

                                window[$response.OldMapLayer].eachLayer(function (layer) {
                                    debugger;
                                    if (JSON.stringify(layer._latlngs) == JSON.stringify([LayerLngs])) {
                                        window[$response.OldMapLayer].removeLayer(layer);
                                        return;
                                    }
                                });

                                //Replace Layer

                                let InforCabline = {
                                    color: $response.MapLayer.ColorLine,
                                    weight: $response.MapLayer.WeightLine
                                };

                                let polyline = L.polyline([$response.Latlngs], InforCabline);

                                polyline.bindPopup($response.PopupContent);

                                window[$response.MapLayer.MapName].addLayer(polyline);

                                window[$response.MapLayer.MapName].on('mouseover', function (e) {
                                    var layer = e.layer;
                                    layer.setStyle({
                                        color: 'blue',
                                        opacity: 1,
                                        weight: 10
                                    });
                                });

                                window[$response.MapLayer.MapName].on('mouseout', function (e) {
                                    var layer = e.layer;
                                    layer.setStyle(InforCabline);
                                });


                                Toast.fire({
                                    icon: 'success',
                                    title: $response.Message
                                });
                                collectionLatLngsLocal = [];
                            }
                        }
                        else {
                            Swal.fire({
                                title: 'Notification',
                                text: $response.Message,
                                icon: 'error',
                                confirmButtonText: 'Close'
                            });
                        }
                    },
                    error: function (data) {
                        Swal.fire({
                            title: 'Notification',
                            text: 'Error when call api controller',
                            icon: 'error',
                            confirmButtonText: 'Close'
                        });
                    }
                });
            }
        });
    }

    // #endregion Polyline

    function getLayerType(layer) {
        var layerType = "";

        if (layer instanceof L.Marker) {
            layerType = "Marker";
        }
        else if (layer instanceof L.Polyline) {
            layerType = "Polyline";
        }
        else if (layer instanceof L.Polygon) {
            layerType = "Polygon";
        }
        return layerType;
    };

    function distance(latlngs) {
        var tempLatLng = null;
        var totalDistance = 0.00000;
        var distanceStr;
        $.each(latlngs, function (i, latlng) {
            if (tempLatLng == null) {
                tempLatLng = latlng;
                return;
            }
            totalDistance += tempLatLng.distanceTo(latlng);
            tempLatLng = latlng;
        });

        if (totalDistance > 1000) {
            distanceStr = formattedNumber(totalDistance / 1000, 2) + ' km';
        } else {
            distanceStr = formattedNumber(totalDistance, 0) + ' m';
        }

        return distanceStr;
    };


    function formattedNumber(n, precision) {
        var formatted = parseFloat(n).toFixed(precision),
            format = L.drawLocal.format && L.drawLocal.format.numeric,
            delimiters = format && format.delimiters,
            thousands = delimiters && delimiters.thousands,
            decimal = delimiters && delimiters.decimal;
        if (thousands || decimal) {
            var splitValue = formatted.split('.');
            formatted = thousands ? splitValue[0].replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + thousands) : splitValue[0];
            decimal = decimal || '.';
            if (splitValue.length > 1) {
                formatted = formatted + decimal + splitValue[1];
            }
        }
        return formatted;
    };

    window.onload = function () {

        $.ajax({
            type: "GET",
            beforeSend: function () {
                $(".loading-bar").show();
            },
            complete: function () {
                $(".loading-bar").hide();
            },
            url: "/Geo/GetGeoData",
            success: function (response) {
                var $response = response;
                if ($response.Success == true) {
                    debugger;
                    let Types = $response.Data.TypeMaps;

                    let paramsJson = {

                    };
                    for (var i = 0; i < Types.length; i++) {
                        //create variable with regist featuremap
                        paramsJson[Types[i].Name] = window[Types[i].MapName] = L.featureGroup().addTo(map);
                    }

                    L.control.layers({
                        "Google Map": googleStreets.addTo(map),
                        "OpenStreet Map": osm,
                        "The free size map": mapWord
                    }, paramsJson, { position: 'topleft', collapsed: false }).addTo(map);


                    map.addControl(new L.Control.Draw({
                        edit: {
                            featureGroup: drawnItems,
                            remove: false ,
                            poly: {
                                allowIntersection: false
                            }
                        },
                        draw: {
                            polygon: {
                                allowIntersection: false,
                                showArea: true
                            },
                            polyline: {
                                shapeOptions: {
                                    color: '#04B431',
                                    weight: 7,
                                }
                            }
                        },
                    }));

                    map.on(L.Draw.Event.CREATED, function (event) {
                        debugger;
                        var layer = event.layer,
                            layerType = getLayerType(layer);

                        if (layerType === 'Marker') {
                            var data = {
                                LatLngs: [layer._latlng]
                            };

                            GetMarker('', data.LatLngs[0].lat, data.LatLngs[0].lng);
                        }
                        else if (layerType === 'Polyline') {
                            let centralLatlngs = layer.getBounds().getCenter().lat + ',' + layer.getBounds().getCenter().lng;

                            CablineLatlngsCU = [];
                            let order = 1;
                            layer._latlngs.forEach(function (item) {
                                let itemInject = {
                                    Order: order,
                                    Latitude: item.lat,
                                    Longitude: item.lng
                                };
                                CablineLatlngsCU.push(itemInject);
                                order++;
                            });
                            let lengthCabline = distance(layer._latlngs);
                            
                            GetPolyline('', CablineLatlngsCU, lengthCabline, centralLatlngs);
                        }

                        console.log('Created layer:', layer);
                        console.log('Type: ', layerType);

                    });


                    map.on(L.Draw.Event.EDITED, function (event) {
                        debugger;
                        var layer = Object.values(event.layers._layers)[0].editing;
                            layerType = getLayerType(layer._marker);

                        if (layerType === 'Marker') 
                        {
                            let latLng = Object.values(event.layers._layers)[0]._latlng;
                            let idMarker = Object.values(event.layers._layers)[0].options.icon.options.id;

                            let raw = {
                                ID : idMarker,
                                Lat : latLng.lat,
                                Long: latLng.lng
                            };

                            UpdateLocationMarker(raw)
                        }
                    });

                    //Markers
                    var Arr = $response.Data.Markers;
                    for (i = 0; i < Arr.length; i++) {

                        var MarkerDefine = L.Icon.extend({
                            options: {
                                iconAnchor: new L.Point(L.Draw.constants.anchorSize, L.Draw.constants.anchorSize),
                                iconSize: new L.Point(L.Draw.constants.iconSize, L.Draw.constants.iconSize),
                                iconUrl: Arr[i].IconType,
                                id : Arr[i].ID
                            },
                        });

                        var mker = L.marker([Arr[i].Lat, Arr[i].Long], { icon: new MarkerDefine() });
                        mker.bindPopup(Arr[i].PopupContent);
                        window[Arr[i].MapName].addLayer(mker);

                        drawnItems.addLayer(mker);
                    }

                    //Polylines
                    var ArrCabline = $response.Data.Polylines;
                    for (i = 0; i < ArrCabline.length; i++) 
                    {
                        let InforCabline = {
                            color: ArrCabline[i].ColorLine,
                            weight: ArrCabline[i].WeightLine
                        };

                        let polyline = L.polyline([ArrCabline[i].OnlyLatLongs], InforCabline);

                        polyline.bindPopup(ArrCabline[i].PopupContent);
                        window[ArrCabline[i].MapName].addLayer(polyline);
                        drawnItems.addLayer(polyline);
                    }
                }
                else {
                    alert('error when get geotdata');
                }
            }
        });
    }
</script>