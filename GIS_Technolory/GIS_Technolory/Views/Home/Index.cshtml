@{
    ViewData["Title"] = "Home Page";
}

<script src="~/js/leaflet/leaflet-src.js"></script>
<link href="~/css/leaflet.css" rel="stylesheet" />

<script src="~/js/drawing/Leaflet.draw.js"></script>
<script src="~/js/drawing/Leaflet.Draw.Event.js"></script>
<link href="~/js/drawing/leaflet.draw.css" rel="stylesheet" />

<script src="~/js/drawing/Toolbar.js"></script>
<script src="~/js/drawing/Tooltip.js"></script>

<script src="~/js/drawing/ext/GeometryUtil.js"></script>
<script src="~/js/drawing/ext/LatLngUtil.js"></script>
<script src="~/js/drawing/ext/LineUtil.Intersect.js"></script>
<script src="~/js/drawing/ext/Polygon.Intersect.js"></script>
<script src="~/js/drawing/ext/Polyline.Intersect.js"></script>
<script src="~/js/drawing/ext/TouchEvents.js"></script>

<script src="~/js/drawing/draw/DrawToolbar.js"></script>
<script src="~/js/drawing/draw/handler/Draw.Feature.js"></script>
<script src="~/js/drawing/draw/handler/Draw.SimpleShape.js"></script>
<script src="~/js/drawing/draw/handler/Draw.Polyline.js"></script>
<script src="~/js/drawing/draw/handler/Draw.Marker.js"></script>
<script src="~/js/drawing/draw/handler/Draw.Circle.js"></script>
<script src="~/js/drawing/draw/handler/Draw.CircleMarker.js"></script>
<script src="~/js/drawing/draw/handler/Draw.Polygon.js"></script>
<script src="~/js/drawing/draw/handler/Draw.Rectangle.js"></script>


<script src="~/js/drawing/edit/EditToolbar.js"></script>
<script src="~/js/drawing/edit/handler/EditToolbar.Edit.js"></script>
<script src="~/js/drawing/edit/handler/EditToolbar.Delete.js"></script>

<script src="~/js/drawing/Control.Draw.js"></script>

<script src="~/js/drawing/edit/handler/Edit.Poly.js"></script>
<script src="~/js/drawing/edit/handler/Edit.SimpleShape.js"></script>
<script src="~/js/drawing/edit/handler/Edit.Rectangle.js"></script>
<script src="~/js/drawing/edit/handler/Edit.Marker.js"></script>
<script src="~/js/drawing/edit/handler/Edit.CircleMarker.js"></script>
<script src="~/js/drawing/edit/handler/Edit.Circle.js"></script>

<script src="~/js/geocoder/control.geocoder.js"></script>
<link href="~/js/geocoder/control.geocoder.css" rel="stylesheet" />

<link href="~/js/hightlight/leaflet.marker.highlight.css" rel="stylesheet" />
<script src="~/js/hightlight/leaflet.marker.highlight.js"></script>

<div class="text-center" style="height: 590px; position:relative">
    <div id="GISMap" style="height: 590px;" class="leaflet-container leaflet-touch leaflet-fade-anim leaflet-grab leaflet-touch-drag leaflet-touch-zoom">

    </div>
    <div style="position:absolute; right:0px; top:0px; height:100%;max-height: inherit;">
        <div id="panel">
            <div style="margin-top : 60px;">
                <div class="row">
                    <hr />
                    <center><b><span style="color : white">SEARCH TOOL</span></b></center>
                    <div class="col-12" style="margin-top : 15px;">
                        <div class="custom-search">
                            <input type="text" class="custom-search-input" placeholder="Enter Name">
                            <button class="custom-search-botton">Search</button>
                        </div>
                    </div>
                </div>

                <hr />
                <div class="row">
                    <div class="col-md-12">
                        <div class="col-md-1">
                        </div>
                        <div class="col-md-10" id="resultSearch">
                        </div>
                        <div class="col-md-1">
                        </div>
                    </div>
                </div>
            </div>

        </div>

        <div id='click' class="to-left">
            <img src="/Icon/icons8-search-30.png" style="margin-left : 5px" />
        </div>
    </div>
    <div class="loading-bar"></div>
</div>

<div class="modal fade" id="modal-marker" tabindex="-1" style="margin-top: 5%" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Marker detail</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="container-modal-body-marker">
                
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary">Save changes</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-polyline" tabindex="-1" style="margin-top: 5%" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Marker detail</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="container-modal-body-polyline">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary">Save changes</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    var osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',

        osmAttrib = 'Bạn đang sử dụng <a href="http://openstreetmap.org/copyright">&copy; OpenStreet Map</a>',
        googleAttrib = 'Bạn đang sử dụng <a href="https://www.google.com/maps/">&copy; Google Map</a>',

        osm = L.tileLayer(osmUrl, {
            maxZoom: 17,
            minZoom: 10,
            attribution: osmAttrib
        });

    mapWord = L.tileLayer('https://api.maptiler.com/maps/streets/256/{z}/{x}/{y}.png?key=tE8RgRCdEojZFnaUYLB7', {
        attribution: '<a href="https://www.maptiler.com/copyright/" target="_blank">&copy; MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>',
        minZoom: 5
    });

    googleStreets = L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
        maxZoom: 17,
        minZoom: 10,
        subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
        attribution: googleAttrib
    });

    //gmapGlobal = L.tileLayer('http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}', { maxZoom: 20, attribution: googleAttrib }),
    // 'HTml element'
    map = new L.Map('GISMap', { center: new L.LatLng(21.028511, 105.804817), zoom: 14 });

    L.control.scale().addTo(map);

    var geocoder = L.Control.geocoder({
        defaultMarkGeocode: false
    }).on('markgeocode', function (e) {
        var bbox = e.geocode.bbox;
        console.log(bbox);
        var poly = L.polygon([
            bbox.getSouthEast(),
            bbox.getNorthEast(),
            bbox.getNorthWest(),
            bbox.getSouthWest(),
        ]).addTo(map);

        //var middleLatlngs = poly.getBounds().getCenter();
        //map.flyTo(new L.LatLng(middleLatlngs.lat, middleLatlngs.lng));
        map.fitBounds(poly.getBounds());

        setTimeout(function () {
            map.removeLayer(poly);
        }, 5000);
    }).addTo(map);


    function GetMarker(id , lat, long) {
        if(id == null) {
            id = '';
        }

        let raw = {
            ID : id,
            Lat : lat,
            Long : long
        };

        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            beforeSend: function () {
                $(".loading-bar").show();
            },
            complete: function () {
                $(".loading-bar").hide();
            },
            url: "/Marker/GetMarker",
            data: JSON.stringify(raw),
            success: function (response) {
                var $response = response;
                if ($response.Success == true) {

                    $("#container-modal-body-marker").html("");
                    $("#container-modal-body-marker").html($response.Data);

                    $("#form-marker-input-typemarker").msDropdown({ roundedBorder: false });

                    let modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('modal-marker')) // Returns a Bootstrap modal instance
                    // Show or hide:
                    modal.show();
                }
                else {
                    alert('error when get geotdata');
                }
            }
        });
    }

    function GetPolyline(id, arrLatLngs, length , central) {
        if (id == null) {
            id = '';
        }

        $.ajax({
            type: "GET",
            beforeSend: function () {
                $(".loading-bar").show();
            },
            complete: function () {
                $(".loading-bar").hide();
            },
            url: "/Polyline/GetPolyline",
            data: {
                id: id
            },
            success: function (response) {
                var $response = response;
                if ($response.Success == true) {

                    $("#container-modal-body-polyline").html("");
                    $("#container-modal-body-polyline").html($response.Data);

                    $("#form-polyline-input-type").msDropdown({ roundedBorder: false });

                    let modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('modal-polyline')) // Returns a Bootstrap modal instance
                    // Show or hide:
                    modal.show();
                }
                else {
                    alert('error when get geotdata');
                }
            }
        });
    }

    function getLayerType(layer) {
        var layerType = "";

        if (layer instanceof L.Marker) {
            layerType = "Marker";
        }
        else if (layer instanceof L.Polyline) {
            layerType = "Polyline";
        }
        return layerType;
    };

    function distance(latlngs) {
        var tempLatLng = null;
        var totalDistance = 0.00000;
        var distanceStr;
        $.each(latlngs, function (i, latlng) {
            if (tempLatLng == null) {
                tempLatLng = latlng;
                return;
            }
            totalDistance += tempLatLng.distanceTo(latlng);
            tempLatLng = latlng;
        });

        if (totalDistance > 1000) {
            distanceStr = formattedNumber(totalDistance / 1000, 2) + ' km';
        } else {
            distanceStr = formattedNumber(totalDistance, 0) + ' m';
        }

        return distanceStr;
    };


    function formattedNumber(n, precision) {
        var formatted = parseFloat(n).toFixed(precision),
            format = L.drawLocal.format && L.drawLocal.format.numeric,
            delimiters = format && format.delimiters,
            thousands = delimiters && delimiters.thousands,
            decimal = delimiters && delimiters.decimal;
        if (thousands || decimal) {
            var splitValue = formatted.split('.');
            formatted = thousands ? splitValue[0].replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + thousands) : splitValue[0];
            decimal = decimal || '.';
            if (splitValue.length > 1) {
                formatted = formatted + decimal + splitValue[1];
            }
        }
        return formatted;
    };

    window.onload = function () {
        $.ajax({
            type: "GET",
            beforeSend: function () {
                $(".loading-bar").show();
            },
            complete: function () {
                $(".loading-bar").hide();
            },
            url: "/Geo/GetGeoData",
            success: function (response) {
                var $response = response;
                if ($response.Success == true) {
                    debugger;
                    let Types = $response.Data.TypeMaps;

                    let paramsJson = {

                    };
                    for (var i = 0; i < Types.length; i++) {
                        //create variable with regist featuremap
                        paramsJson[Types[i].Name] = window[Types[i].MapName] = L.featureGroup().addTo(map);
                    }

                    L.control.layers({
                        "OpenStreet Map": osm.addTo(map),
                        "Google Map": googleStreets,
                        "The free size map": mapWord
                    }, paramsJson, { position: 'topleft', collapsed: false }).addTo(map);

                    let drawnItems = L.featureGroup().addTo(map);

                    map.addControl(new L.Control.Draw({
                        edit: {
                            featureGroup: drawnItems,
                            poly: {
                                allowIntersection: false
                            }
                        },
                        draw: {
                            polygon: {
                                allowIntersection: false,
                                showArea: true
                            },
                            polyline: {
                                shapeOptions: {
                                    color: '#04B431',
                                    weight: 7,
                                }
                            }
                        }
                    }));


                    map.on(L.Draw.Event.CREATED, function (event) {
                        //drawnItems.addLayer(layer);

                        debugger;
                        var layer = event.layer,
                            layerType = getLayerType(layer);

                        if (layerType === 'Marker') {
                            var data = {
                                LatLngs: [layer._latlng]
                            };

                            GetMarker('', data.LatLngs[0].lat, data.LatLngs[0].lng);
                        }
                        else if (layerType === 'Polyline') {
                            let centralLatlngs = layer.getBounds().getCenter().lat + ',' + layer.getBounds().getCenter().lng;

                            CablineLatlngsCU = [];
                            let order = 1;
                            layer._latlngs.forEach(function (item) {
                                let itemInject = {
                                    Order: order,
                                    lat: item.lat,
                                    lng: item.lng
                                };
                                CablineLatlngsCU.push(itemInject);
                                order++;
                            });
                            let lengthCabline = distance(layer._latlngs);
                            
                            GetPolyline('', CablineLatlngsCU, lengthCabline, centralLatlngs);
                        }

                        console.log('Created layer:', layer);
                        console.log('Type: ', layerType);

                    });

                }
                else {
                    alert('error when get geotdata');
                }
            }
        });
    }
</script>