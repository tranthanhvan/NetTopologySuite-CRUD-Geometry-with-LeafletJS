// <auto-generated />
using GIS_Technolory.DBAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GISTechnolory.Migrations
{
    [DbContext(typeof(GISContext))]
    partial class GISContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GIS_Technolory.Entities.Marker", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("Long")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PopupContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("TypeID");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("GIS_Technolory.Entities.Polyline", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CablineLength")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CentralLatlng")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PopupContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("TypeID");

                    b.ToTable("Polylines");
                });

            modelBuilder.Entity("GIS_Technolory.Entities.PolylineLatLong", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PolylineID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("PolylineID");

                    b.ToTable("PolylineLatLongs");
                });

            modelBuilder.Entity("GIS_Technolory.Entities.TypeMarker", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Icon")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ID");

                    b.ToTable("TypeMarkers");
                });

            modelBuilder.Entity("GIS_Technolory.Entities.TypePolyline", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ColorLine")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Icon")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("WeightLine")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("TypePolylines");
                });

            modelBuilder.Entity("GIS_Technolory.Entities.Marker", b =>
                {
                    b.HasOne("GIS_Technolory.Entities.TypeMarker", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GIS_Technolory.Entities.Polyline", b =>
                {
                    b.HasOne("GIS_Technolory.Entities.TypePolyline", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GIS_Technolory.Entities.PolylineLatLong", b =>
                {
                    b.HasOne("GIS_Technolory.Entities.Polyline", "Polyline")
                        .WithMany("LatLongs")
                        .HasForeignKey("PolylineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Polyline");
                });

            modelBuilder.Entity("GIS_Technolory.Entities.Polyline", b =>
                {
                    b.Navigation("LatLongs");
                });
#pragma warning restore 612, 618
        }
    }
}
